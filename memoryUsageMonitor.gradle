buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.github.oshi:oshi-core:5.2.2"
    }
}
def long getUsedMemory(oshi.hardware.GlobalMemory memory) {
    return memory.total - memory.available;
}

tasks.withType(Test) {
    maxParallelForks = 1
    forkEvery = 0
    ignoreFailures = true


    def csvFile = new File("${project.rootDir}/build/reports/memoryUsage/report.csv")
    def startUsage = 0l
    def memory = new oshi.SystemInfo().hardware.memory

    def maxUsage = 0l
    def running = true

    def counter = new java.util.concurrent.atomic.AtomicInteger(0)

    def monitorThread = new Thread({
        while(running) {
            Thread.sleep(100)
            def usage = getUsedMemory(memory)
            if(usage > maxUsage) {
                maxUsage = usage
            }
        }
    })

    monitorThread.setDaemon(true)



    addTestListener(new TestListener() {
        void beforeTest(TestDescriptor testDescriptor) {
            startUsage = getUsedMemory(memory)
            maxUsage = startUsage;
            println("Starting...")
        }

        void beforeSuite(TestDescriptor suite) {
        }

        void afterSuite(TestDescriptor suite, TestResult result) {
        }

        void afterTest(TestDescriptor testDescriptor, TestResult result) {
            def gc = Runtime.getRuntime().exec("jcmd GradleWorkerMain GC.run")
            gc.waitFor()
            Thread.sleep(10000)

            def currentTest = (testDescriptor.className +"." + testDescriptor.name).replace("\"", "\"\"")
            def endUsage = getUsedMemory(memory)
            if(endUsage > maxUsage) {
                maxUsage = endUsage
            }
            csvFile.append("${counter.incrementAndGet()},\"${currentTest}\",$startUsage,$maxUsage,$endUsage,${(result.getEndTime() - result.getStartTime())/ 1000.0},${result.resultType.name()}\n")
        }
    })
    doFirst {
        csvFile.parentFile.mkdirs()
        if(!csvFile.exists()) {
            csvFile.write("Index,Test,Used memory before start,Used memory after ends,Max used memry during,Duration (seconds),result\n")
        }
        monitorThread.start()
    }
    doLast {
        running = false
    }
}
