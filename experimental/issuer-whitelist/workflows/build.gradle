import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import net.corda.plugins.Cordform

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

dependencies {
    cordaCompile project(":node") // Not node-api so we get metrics.

    cordapp project(":experimental:issuer-whitelist:contracts")

    // Corda integration dependencies
    cordaRuntime project(path: ":node:capsule", configuration: 'runtimeArtifacts')

    // Cordformation needs a SLF4J implementation when executing the Network
    // Bootstrapper, but Log4J doesn't shutdown completely from within Gradle.
    // Use a much simpler SLF4J implementation here instead.
    cordaRuntime "org.slf4j:slf4j-simple:$slf4j_version"

    
    testCompile project(":node-driver")
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "junit:junit:$junit_version"
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

cordapp {
    info {
        name "net/corda/experimental/issuerwhitelist/workflows"
        vendor "R3"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion 1
    }
}

def nodeTask = tasks.getByPath(':node:capsule:assemble')

task deployNodes(type: Cordform, dependsOn: ['jar', nodeTask]) {
    nodeDefaults {
        cordapp project(":experimental:issuer-whitelist:contracts")
        extraConfig = [h2Settings: [address: "localhost:0"]]
        projectCordapp {
            deploy = true
        }
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10000
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10002")
        }
        projectCordapp {
            deploy = false
        }
        cordapps.clear()
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10004
        rpcSettings {
            address("localhost:10005")
            adminAddress("localhost:10006")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10010")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}