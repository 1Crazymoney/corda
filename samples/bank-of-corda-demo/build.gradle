apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // The bank of corda CorDapp depends upon Cash CorDapp features
    cordapp project(':finance:contracts')
    cordapp project(':finance:workflows')

    // Cordformation needs a SLF4J implementation when executing the Network
    // Bootstrapper, but Log4J doesn't shutdown completely from within Gradle.
    // Use a much simpler SLF4J implementation here instead.
    cordaRuntime "org.slf4j:slf4j-simple:$slf4j_version"

    // Corda integration dependencies
    cordaRuntime project(path: ":node:capsule", configuration: 'runtimeArtifacts')
    cordaRuntime project(path: ":testing:testserver:testcapsule:", configuration: 'runtimeArtifacts')
    cordaCompile project(':core')
    cordaCompile project(':client:jfx')
    cordaCompile project(':client:rpc')
    cordaCompile(project(':testing:testserver')) {
        exclude group: "org.apache.logging.log4j"
    }
    cordaCompile (project(':node-driver')) {
        exclude group: "org.apache.logging.log4j"
    }

    // Javax is required for webapis
    compile "org.glassfish.jersey.core:jersey-server:${jersey_version}"

    // Test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
    testImplementation "junit:junit:$junit_version"

    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit_vintage_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_version}"
}

def nodeTask = tasks.getByPath(':node:capsule:assemble')
def webTask = tasks.getByPath(':testing:testserver:testcapsule::assemble')
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar', nodeTask, webTask]) {
    nodeDefaults {
        cordapp project(':finance:workflows')
        cordapp project(':finance:contracts')
        runSchemaMigration = true
    }
    node {
        name "O=Notary Node,L=Zurich,C=CH"
        notary = [validating: true,
                  serviceLegalName: "O=Notary Service,L=Zurich,C=CH"
        ]
        p2pPort 10002
        rpcSettings {
            address "localhost:10003"
            adminAddress "localhost:10004"
        }
        extraConfig = [h2Settings: [address: "localhost:10016"]]
    }
    node {
        name "O=BankOfCorda,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address "localhost:10006"
            adminAddress "localhost:10015"
        }
        webPort 10007
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10017"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BigCorporation,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address "localhost:10009"
            adminAddress "localhost:10011"
        }
        webPort 10010
        rpcUsers = [[user: "bigCorpUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10018"]
        ]
    }
    node {
        name "O=BankOfCorda2,L=London,C=GB"
        p2pPort 10031
        rpcSettings {
            address "localhost:10032"
            adminAddress "localhost:10033"
        }
        webPort 10034
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10035"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda3,L=London,C=GB"
        p2pPort 10036
        rpcSettings {
            address "localhost:10037"
            adminAddress "localhost:10038"
        }
        webPort 10039
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10040"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda4,L=London,C=GB"
        p2pPort 10041
        rpcSettings {
            address "localhost:10042"
            adminAddress "localhost:10043"
        }
        webPort 10044
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10045"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda5,L=London,C=GB"
        p2pPort 10046
        rpcSettings {
            address "localhost:10047"
            adminAddress "localhost:10048"
        }
        webPort 10049
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10050"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda6,L=London,C=GB"
        p2pPort 10051
        rpcSettings {
            address "localhost:10052"
            adminAddress "localhost:10053"
        }
        webPort 10054
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10055"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda7,L=London,C=GB"
        p2pPort 10056
        rpcSettings {
            address "localhost:10057"
            adminAddress "localhost:10058"
        }
        webPort 10059
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10060"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda8,L=London,C=GB"
        p2pPort 10061
        rpcSettings {
            address "localhost:10062"
            adminAddress "localhost:10063"
        }
        webPort 10064
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10065"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda9,L=London,C=GB"
        p2pPort 10066
        rpcSettings {
            address "localhost:10067"
            adminAddress "localhost:10068"
        }
        webPort 10069
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10070"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda10,L=London,C=GB"
        p2pPort 10071
        rpcSettings {
            address "localhost:10072"
            adminAddress "localhost:10073"
        }
        webPort 10074
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10075"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda11,L=London,C=GB"
        p2pPort 10076
        rpcSettings {
            address "localhost:10077"
            adminAddress "localhost:10078"
        }
        webPort 10079
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10080"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda12,L=London,C=GB"
        p2pPort 10081
        rpcSettings {
            address "localhost:10082"
            adminAddress "localhost:10083"
        }
        webPort 10084
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10085"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
    node {
        name "O=BankOfCorda13,L=London,C=GB"
        p2pPort 10086
        rpcSettings {
            address "localhost:10087"
            adminAddress "localhost:10088"
        }
        webPort 10089
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        extraConfig = [
                h2Settings: [address: "localhost:10090"]
        ]
        cordapp(project(':finance:workflows')) {
            config "issuableCurrencies = [ USD ]"
        }
    }
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

task runRPCCashIssue(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.bank.IssueCash'
    args '--role'
    args 'ISSUE_CASH_RPC'
    args '--quantity'
    args 20000
    args '--currency'
    args 'USD'
    if (JavaVersion.current() == JavaVersion.VERSION_11) {
        jvmArgs '--add-opens'
        jvmArgs 'java.base/java.time=ALL-UNNAMED'
        jvmArgs '--add-opens'
        jvmArgs 'java.base/java.io=ALL-UNNAMED'
    }
}

task runWebCashIssue(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.bank.IssueCash'
    args '--role'
    args 'ISSUE_CASH_WEB'
    args '--quantity'
    args 30000
    args '--currency'
    args 'GBP'
    if (JavaVersion.current() == JavaVersion.VERSION_11) {
        jvmArgs '--add-opens'
        jvmArgs 'java.base/java.time=ALL-UNNAMED'
        jvmArgs '--add-opens'
        jvmArgs 'java.base/java.io=ALL-UNNAMED'
    }
}

jar {
    manifest {
        attributes(
                'Automatic-Module-Name': 'net.corda.samples.demos.bankofcorda'
        )
    }
}

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion 1
    info {
        name "Bank of Corda Demo"
        version "1"
        vendor "R3"
    }
}
