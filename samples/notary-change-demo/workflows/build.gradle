apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'

description 'Corda Notary Change - Workflows'

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion 1
    workflow {
        name "Corda Notary Change Demo"
        versionId 1
        vendor "R3"
        licence "Open Source (Apache 2)"
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
    test {
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

jar {
    baseName 'corda-notary-demo-workflows'
}

dependencies {
    // Kotlin.
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda
    cordaCompile project(':core')
//    cordaCompile project(':client:rpc')

    // Tokens.
    cordaCompile "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordaCompile "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordaCompile "$tokens_release_group:tokens-selection:$tokens_release_version"
    cordaCompile "$tokens_release_group:tokens-money:$tokens_release_version"
//    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"

    // We need to compile against the Node, but also DO NOT
    // want the Node bundled inside the CorDapp or added to
    // Gradle's runtime classpath.
    compileOnly project(':node')

    cordapp project(':samples:notary-change-demo:contracts')

//    // Unit testing helpers.
//    testCompile "org.assertj:assertj-core:${assertj_version}"
//
//    testImplementation project(':node-driver')
//    testImplementation "junit:junit:$junit_version"
//    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}