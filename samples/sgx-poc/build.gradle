apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.cordformation'

cordapp {
    info {
        name "Sgx POC"
        vendor "R3"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion 1
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    cordapp project(':samples:sgx-poc:contracts-kotlin')
    cordapp project(':samples:sgx-poc:workflows-kotlin')
    cordaRuntime project(":node-api")
    cordaRuntime project(path: ":node:capsule", configuration: 'runtimeArtifacts')
    
    // Cordformation needs a SLF4J implementation when executing the Network
    // Bootstrapper, but Log4J doesn't shutdown completely from within Gradle.
    // Use a much simpler SLF4J implementation here instead.
    cordaRuntime "org.slf4j:slf4j-simple:$slf4j_version"
}

def nodeTask = tasks.getByPath(':node:capsule:assemble')

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar', nodeTask]) {
    nodeDefaults {
        cordapp project(":samples:sgx-poc:contracts-kotlin")
        cordapp project(":samples:sgx-poc:workflows-kotlin")
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10000
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10002")
        }
        projectCordapp {
            deploy = false
        }
        cordapps.clear()
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10004
        rpcSettings {
            address("localhost:10005")
            adminAddress("localhost:10006")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                'txValidityOracleClientConfig.type': 'REMOTE',
                'txValidityOracleClientConfig.target': 'localhost:30080'
        ]
    }
    /*
    node {
        name "O=PartyB,L=London,C=GB"
        p2pPort 10012
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10014")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    flow start IssueFlow id: 100, enclaveSig: False
    flow start TransferFlow id: 100, receipient: "O=PartyA,L=London,C=GB", enclaveSig: True

     */
}
